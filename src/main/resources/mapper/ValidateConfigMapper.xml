<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.io24m.adminservice.mapper.ValidateConfigMapper">
  <resultMap id="BaseResultMap" type="com.github.io24m.adminservice.domain.ValidateConfig">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="class_name" jdbcType="VARCHAR" property="className" />
    <result column="key" jdbcType="VARCHAR" property="key" />
    <result column="validate_type" jdbcType="VARCHAR" property="validateType" />
    <result column="check" jdbcType="BOOLEAN" property="check" />
    <result column="pass" jdbcType="BOOLEAN" property="pass" />
    <result column="error_message" jdbcType="VARCHAR" property="errorMessage" />
  </resultMap>
  <sql id="Base_Column_List">
    id, class_name, `key`, validate_type, `check`, pass, error_message
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from validate_config
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from validate_config
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from validate_config
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.github.io24m.adminservice.domain.ValidateConfig" useGeneratedKeys="true">
    insert into validate_config (class_name, `key`, validate_type, 
      `check`, pass, error_message
      )
    values (#{className,jdbcType=VARCHAR}, #{key,jdbcType=VARCHAR}, #{validateType,jdbcType=VARCHAR}, 
      #{check,jdbcType=BOOLEAN}, #{pass,jdbcType=BOOLEAN}, #{errorMessage,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.github.io24m.adminservice.domain.ValidateConfig" useGeneratedKeys="true">
    insert into validate_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="className != null">
        class_name,
      </if>
      <if test="key != null">
        `key`,
      </if>
      <if test="validateType != null">
        validate_type,
      </if>
      <if test="check != null">
        `check`,
      </if>
      <if test="pass != null">
        pass,
      </if>
      <if test="errorMessage != null">
        error_message,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="className != null">
        #{className,jdbcType=VARCHAR},
      </if>
      <if test="key != null">
        #{key,jdbcType=VARCHAR},
      </if>
      <if test="validateType != null">
        #{validateType,jdbcType=VARCHAR},
      </if>
      <if test="check != null">
        #{check,jdbcType=BOOLEAN},
      </if>
      <if test="pass != null">
        #{pass,jdbcType=BOOLEAN},
      </if>
      <if test="errorMessage != null">
        #{errorMessage,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.io24m.adminservice.domain.ValidateConfig">
    update validate_config
    <set>
      <if test="className != null">
        class_name = #{className,jdbcType=VARCHAR},
      </if>
      <if test="key != null">
        `key` = #{key,jdbcType=VARCHAR},
      </if>
      <if test="validateType != null">
        validate_type = #{validateType,jdbcType=VARCHAR},
      </if>
      <if test="check != null">
        `check` = #{check,jdbcType=BOOLEAN},
      </if>
      <if test="pass != null">
        pass = #{pass,jdbcType=BOOLEAN},
      </if>
      <if test="errorMessage != null">
        error_message = #{errorMessage,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.io24m.adminservice.domain.ValidateConfig">
    update validate_config
    set class_name = #{className,jdbcType=VARCHAR},
      `key` = #{key,jdbcType=VARCHAR},
      validate_type = #{validateType,jdbcType=VARCHAR},
      `check` = #{check,jdbcType=BOOLEAN},
      pass = #{pass,jdbcType=BOOLEAN},
      error_message = #{errorMessage,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>